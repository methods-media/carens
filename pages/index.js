import { useTranslation } from 'next-i18next';
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';
import Head from 'next/head';
import dynamic from 'next/dynamic';
const Banner = dynamic(() => import('../src/modules/Banner'), { ssr: false });
const ScrollSequence = dynamic(() => import('../src/modules/ImageSequence'), { ssr: false });
import { exterior1, interior } from 'public/assets/seq/seq';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
const EngineSection = dynamic(() => import('@src/components/EngineSection').then(m => m.EngineSection), { ssr: false });
const SwiperSection = dynamic(() => import('../src/components/SwiperSection').then(m => m.SwiperSection), { ssr: false });
const EngineTypesSection = dynamic(() => import('@src/components/EngineTypes').then(m => m.EngineTypesSection), { ssr: false });
const AmbiantLight = dynamic(() => import('@src/components/ambiant'), { ssr: false });
const VRShowroom = dynamic(() => import('@src/modules/VRShowroom'), { ssr: false });
const Dimensions = dynamic(() => import('@src/components/dimensions'), { ssr: false });
const Specs = dynamic(() => import('@src/components/specs'), { ssr: false });
const FloatingTextThree = dynamic(() => import('@src/components/floatingText3').then(m => m.FloatingTextThree), { ssr: false });
const Exterior = dynamic(() => import('@src/components/exterior').then(m => m.Exterior), { ssr: false });
const Interior = dynamic(() => import('@src/components/interior').then(m => m.Interior), { ssr: false });
const ThreeSixty = dynamic(() => import('@src/modules/ThreeSixty'), { ssr: false });

export default function Home() {
  const { t, i18n } = useTranslation('common');
  const isArabic = i18n?.language == 'ar'; // Replace with your actual language detection logic
  const [mounted, setMounted] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false)

  
  const router = useRouter();
  const { locale, query } = useRouter();
  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    return null; // or a loading state
  }



  return (
    <main className="relative">

      <Head>
        {router.locale == 'ar' ? <title>كيا كارينز - البروشور الرقمي</title> : <title>Kia Carens - Digital Brochure</title>}
        <link rel="icon" href="/kia.ico"  />
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Banner />
     
      <div className='w-screen h-[50vh] lg:h-screen'>
        <EngineSection />
      </div>
      <div className='w-screen  h-[50vh] lg:h-[70vh]' id='exterior'>
        <Exterior />
     </div>
           <div className="relative"  style={{ zIndex: 1000 }}>
        <ScrollSequence
          id="canvas4"
          imagesUrl={exterior1}
          totalFrames={exterior1?.length}
         
        />
      </div>
      <SwiperSection height={'min-h-[40vh]'} id={0} />
      <VRShowroom />
      <ThreeSixty showControl={true} />
      <Interior/>
      <div className="relative"  style={{ zIndex: 1000 }}>
        <ScrollSequence
          id="canvas5"
          imagesUrl={interior}
          totalFrames={interior?.length}
         
        />
      </div>
      <FloatingTextThree/>
      <AmbiantLight isModalOpen={isModalOpen} setIsModalOpen={setIsModalOpen} />
      <SwiperSection height={'min-h-[40vh]'} id={1} />
      {/* <ParallaxSection /> */}
      <EngineTypesSection />

      {/* <ParallaxSectionSecond /> */}
      <div className="content22 w-screen h-[50vh] lg:h-screen relative"
        id='safety'
        >
        <img src='https://imagedelivery.net/2Dh6erMZ0IA4Y2r-mRikDg/094bd897-fca4-44ec-e4ad-dd48271d9800/big'
          // autoPlay
          // muted
          // loop
          // playsInline
          // webkit-playsinline="true"
          // controls={false}
          // controlsList="noremoteplayback"
          // disablePictureInPicture
          className='w-screen h-[50vh] lg:h-screen object-cover' />
        <div className='absolute w-full bottom-0 start-0 p-3 lg:p-10  bg-gradient-to-t h-[50vh] from-white to-transparent flex flex-col justify-end items-center'>
          <p className={`text-xl lg:text-[42px] text-black ${locale == 'ar' ? 'font-[GSSMedium]' : 'font-[InterBold]'}  text-center`}> {i18n?.language == 'ar' ?
            <>
              {`أنظمة مساعدة السائق `}
              <span className='font-[InterBold]'>(ADAS)</span>

            </>

            : `Advanced Driver Assistance System (ADAS)`} </p>
        </div>
      </div>

      <div className=' bg-white '>
        <SwiperSection height={'min-h-[65vh]'} id={3} noBg dark={true} />
      </div>

      <Dimensions />
      <Specs/>
      {isModalOpen ?
        <div
          className='fixed w-screen h-screen bg-black/90 z-[10000] flex flex-col items-center justify-center  left-0 top-0'
          onClick={() => {
            document.body.style.overflow = 'auto'
            setIsModalOpen(false)
          }}
        >
          <div
            className="bg-white rounded-xl flex flex-col  items-end w-[90%] lg:w-[650px]  relative"
            onClick={(e) => e.stopPropagation()}
          >
            <button onClick={() => {
              document.body.style.overflow = 'auto'
              setIsModalOpen(false)
            }} className="text-black text-3xl cursor-pointer rounded-full w-10 h-10 bg-white absolute end-4 top-4 ">×</button>
            <div className='flex flex-col items-center  w-full'>
              <img src={isModalOpen == 1 ? 'https://imagedelivery.net/2Dh6erMZ0IA4Y2r-mRikDg/3a643686-eb00-416f-0630-f7c9c0603700/public' : isModalOpen == 2 ? 'https://imagedelivery.net/2Dh6erMZ0IA4Y2r-mRikDg/4cc0b2b5-02d8-4de1-ec66-18e949218a00/public' : 'https://imagedelivery.net/2Dh6erMZ0IA4Y2r-mRikDg/d3613d09-c20f-4775-2154-faddbf3cdc00/public'} width={'100%'} height={'450px'} alt="Analytics Overview" className="md:h-[450px] rounded-t-xl" loading="lazy" decoding="async" />
              <div className="p-6 flex flex-col gap-3 ">
                <div className={`text-[#333] text-center ${isArabic ? 'font-[GSSMedium]' : 'font-[InterBold]'} text-[20px]`}>
                  {isModalOpen == 1 ?
                    <>
                      {t('swiper.Bose0')?.split('Bose')?.[0]}
                      <span className='font-[InterBold]'>BOSE</span>
                      {t('swiper.Bose0')?.split('Bose')?.[1]}

                    </>
                    
                    : isModalOpen == 2 ? t('swiper.Cooling0') : t('swiper.Center0')}
                </div>
                <div className={`text-[#666]  text-center ${i18n?.language == 'ar' ? 'font-[GSSMedium]' : 'font-[InterRegular]'} text-sm`}
                 
                >
                  {isModalOpen == 1 ?
                    
                    <>
                      {t('swiper.Bose1')?.split('Bose')?.[0]}
                      <span className='font-[InterBold]'>BOSE</span>
                      {t('swiper.Bose1')?.split('Bose')?.[1]}

                    </>
                  
                    
                    : isModalOpen == 2 ? t('swiper.Cooling1') : t('swiper.Center1')}
                </div>
              
              </div>
            </div>
          </div>
        </div> : null}
    </main>
  );
}

export async function getStaticProps({ locale }) {
  return {
    props: {
      ...(await serverSideTranslations(locale, ['common'])),
    },
  };
}
